{"version":3,"sources":["actions/index.js","containers/AddTask.js","containers/EditTask.js","containers/SelectTimerInputs.js","components/Task.js","components/TaskList.js","containers/MappedTaskList.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["REMOVE_TASK","EDIT_TASK","COUNT_DOWN","TaskEntry","connect","_ref","input","dispatch","react_default","a","createElement","mdbreact_esm","style","flex","justifyContent","alignContent","onSubmit","e","text","preventDefault","value","trim","type","id","hours","minutes","seconds","totalTime","displayTime","timerOn","placeholder","padding","ref","node","size","color","className","icon","editTask","display","flexDirection","width","margin","placement","tag","component","tooltipContent","defaultValue","onChange","selectHours","parseInt","target","selectMinutes","Task","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","timerObject","onStartTimer","bind","assertThisInitialized","pauseCountDown","toggleTimer","setInterval","onCountDown","clearInterval","_this2","_this$props","showSetTimerModal","toggleSetTimerModal","showEdit","onClick","highlight","onDel","allowEdit","currentPosition","onTimerSet","onSelectTimerHours","onSelectTimerMinutes","onPauseCountDown","draggable","onDragStart","ev","console","log","dataTransfer","setData","md","border","height","textDecoration","textDecorationColor","backgroundColor","opacity","marginTop","isOpen","toggle","containers_SelectTimerInputs","outline","far","textAlign","alignSelf","containers_EditTask","React","Component","TaskList","tasks","onTaskComplete","onDeleteTask","onAllowEdit","onDropTask","setTheTimer","countDown","onToggleSetTimerModal","onToggleTimerSwitch","map","task","index","key","onDragOver","onDrop","components_Task","state","allTasks","highTask","removeTask","dropSpot","setTimer","App","texAlign","containers_AddTask","MappedTaskList","Boolean","window","location","hostname","match","countDownSeconds","taskSeconds","prepareDisplayTime","sec","Math","floor","remainderMins","mins","remainderSecs","secs","ceil","concat","hrs","displayMins","calculateSeconds","hoursToMin","combineReducers","arguments","length","undefined","action","toConsumableArray","filter","assign","array","currentTasks","slice","splice","buildNewTaskList","getData","logger","createLogger","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.edb44f18.chunk.js","sourcesContent":["export const ADD_TASK = \"ADD_TASK\";\nexport const REMOVE_TASK = \"REMOVE_TASK\";\nexport const EDIT_TASK = \"EDIT_TASK\";\nexport const HIGH_TASK = \"HIGH_TASK\";\nexport const ALLOW_EDIT = \"ALLOW_EDIT\";\nexport const DRAG_TASK = \"DRAG_TASK\";\nexport const PAUSE_TIMER = \"PAUSE_TIMER\";\nexport const START_TIMER = \"START_TIMER\";\nexport const SET_TIMER = \"SET_TIMER\";\nexport const TOGGLE_SET_TIMER_MODAL = \"TOGGLE_SET_TIMER_MODAL\";\nexport const SELECT_HOURS = \"SELECT_HOURS\";\nexport const SELECT_MINUTES = \"SELECT_MINUTES\";\nexport const COUNT_DOWN = \"COUNT_DOWN\";\nexport const TOGGLE_TIMER_SWITCH = \"TOGGLE_TIMER_SWITCH\";\n\n\nexport const onToggleTimerSwitch = (id, timerOn) => ({\n    type: TOGGLE_TIMER_SWITCH,\n    id,\n    timerOn\n});\n\nexport function countDown(id, timerOn, seconds){\n    if(seconds > 0) {\n        return {\n        type: COUNT_DOWN,\n        id,\n        timerOn,\n        seconds\n        }\n    }\n};\n\nexport const setTimer = (id, hours, minutes) => ({\n    type: SET_TIMER,\n    id,\n    hours,\n    minutes,\n\n});\n\nexport const onToggleSetTimerModal = (id, showSetTimerModal) => ({\n    type: TOGGLE_SET_TIMER_MODAL,\n    id,\n    showSetTimerModal\n});\n\nexport const pauseTimer = (timerOn) => ({\n    type: PAUSE_TIMER,\n    timerOn\n});\n\n\nexport const selectHours = (hours, id) => ({\n    type: SELECT_HOURS,\n    hours,\n    id\n});\nexport const selectMinutes = (minutes, id) => ({\n    type: SELECT_MINUTES,\n    minutes,\n    id\n});\n\n\n\nlet TaskEntry = 0;\n\nexport const addTask = (text) => ({\n    type: ADD_TASK,\n    id: TaskEntry++,\n    text,\n    hours:0,\n    minutes:0,\n    seconds:0,\n    totalTime:'',\n    displayTime: \"0:00:00\",\n    timerOn: false,\n});\n\nexport function removeTask(id) {\n    return {\n        type: REMOVE_TASK,\n        id\n    }\n}\n\nexport function editTask(id, text) {\n    return {\n        type: EDIT_TASK,\n        id,\n        text\n    }\n}\n\nexport const highTask = (id) => ({\n    type: HIGH_TASK,\n    id\n});\n\nexport const allowEdit = (id) => ({\n    type: ALLOW_EDIT,\n    id\n});\n\nexport const onDropTask = (ev, dropSpot) => ({\n    type: DRAG_TASK,\n    ev,\n    dropSpot\n});\n\n","import React from 'react'\nimport {connect} from 'react-redux'\nimport {addTask} from '../actions'\nimport { MDBIcon, MDBRow, MDBBtn} from \"mdbreact\";\n\n\n/******     Add Task Controller     *******/\nconst AddTask = ({dispatch}) => {\n    let input;\n    return (\n        <MDBRow style={{flex:1, justifyContent:'center', alignContent:'center'}}>\n            <form\n                onSubmit={e => {\n                    e.preventDefault();\n                    if (!input.value.trim()) {\n                        return\n                    }\n                    {/******     connected to Redux action addTask(taskTitle)    *******/}\n                    dispatch(addTask(input.value));\n                    input.value = ''\n                }}\n            >\n                <input\n                    placeholder={'Add Task'}\n                    style={{padding:2}}\n                    ref={node => (input = node)} />\n                <MDBBtn size={'sm'} type=\"submit\">\n                    <MDBIcon\n                        color=\"indigo\"\n                        className=\"mb-1\"\n                        icon=\"plus-square\"\n                        size=\"lg\"\n                    />\n                </MDBBtn>\n            </form>\n        </MDBRow>\n    )\n}\nexport default connect()(AddTask);","import React from 'react'\nimport {connect} from 'react-redux'\nimport {editTask} from '../actions'\nimport { MDBIcon, MDBBtn, MDBFormInline, MDBCardFooter,} from \"mdbreact\";\n\n/******     Edit Task Controller     *******/\nconst EditTask = ({dispatch, id}) => {\n    let input;\n    return (\n        <MDBCardFooter>\n            <MDBFormInline\n\n                onSubmit={e => {\n                    e.preventDefault()\n                    if (!input.value.trim()) {\n                        return\n                    }\n                    {/******     connected to Redux action editTask(taskId, newtaskTitle)    *******/}\n                    dispatch(editTask(id, input.value))\n                    input.value = ''\n                }}\n            >\n                <input  placeholder={'Edit Entry'} ref={node => (input = node)} />\n                <MDBBtn  color=\"light-green\" size={\"sm\"} type=\"submit\">\n                    <MDBIcon\n                        className=\"mb-1\"\n                        icon=\"paper-plane\"\n                    />\n                </MDBBtn>\n            </MDBFormInline>\n        </MDBCardFooter>\n    )\n}\nexport default connect()(EditTask);\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {selectHours, selectMinutes} from '../actions';\nimport {MDBTooltip} from 'mdbreact';\n\n\n{/******     SelectTimerInputs Container    *******/}\nconst SelectTimerInputs = ({dispatch, id, hours, minutes}) => {\n    {/******     connected to Redux actions selectHours(hours) & selectMinutes(minutes)    *******/}\n    return(\n        <div style={{display:'flex', flexDirection:'row',}}>\n            <MDBTooltip style={{width:'50%', margin:10}} placement=\"top\" tag=\"a\" component=\"span\" tooltipContent=\"Hours\">\n                <select\n                    style={{margin:10}}\n                    defaultValue={hours}\n                    onChange={(e) => {\n                        dispatch(selectHours(parseInt(e.target.value), id));\n                    }}\n                >\n                    <option value=\"0\">0</option>\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                    <option value=\"4\">4</option>\n                    <option value=\"5\">5</option>\n                    <option value=\"6\">6</option>\n                    <option value=\"7\">7</option>\n                    <option value=\"8\">8</option>\n                    <option value=\"9\">9</option>\n                    <option value=\"10\">10</option>\n                </select>\n            </MDBTooltip>\n            <MDBTooltip style={{width:'50%', margin:10}} placement=\"top\" tag=\"a\" component=\"span\" tooltipContent=\"Minutes\">\n                <select\n                    style={{margin:10}}\n                    defaultValue={minutes}\n                    onChange={(e) => {\n                        dispatch(selectMinutes(parseInt(e.target.value), id));\n                    }}\n                >\n                    <option value=\"0\">0</option>\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                    <option value=\"4\">4</option>\n                    <option value=\"5\">5</option>\n                    <option value=\"6\">6</option>\n                    <option value=\"7\">7</option>\n                    <option value=\"8\">8</option>\n                    <option value=\"9\">9</option>\n                    <option value=\"10\">10</option>\n                    <option value=\"15\">15</option>\n                    <option value=\"20\">20</option>\n                    <option value=\"25\">25</option>\n                    <option value=\"30\">30</option>\n                    <option value=\"35\">35</option>\n                    <option value=\"40\">40</option>\n                    <option value=\"45\">45</option>\n                    <option value=\"50\">50</option>\n                    <option value=\"55\">55</option>\n                </select>\n            </MDBTooltip>\n        </div>\n\n    )\n\n};\nexport default connect()(SelectTimerInputs);","import React from 'react';\nimport EditTask from '../containers/EditTask';\nimport SelectTimerInputs from '../containers/SelectTimerInputs';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {\n    MDBIcon, MDBModal, MDBModalHeader, MDBModalBody, MDBBtn,\n    MDBCard, MDBCardHeader, MDBCardTitle, MDBCardFooter,MDBTooltip,\n} from \"mdbreact\";\n\n\nclass Task extends React.Component {\n    constructor(props){\n        super(props);\n\n        this.timerObject = 0;\n        this.onStartTimer = this.onStartTimer.bind(this);\n        this.pauseCountDown = this.pauseCountDown.bind(this);\n    }\n    onStartTimer(){\n        if(this.timerObject === 0 && this.props.seconds > 0 && this.props.displayTime !== \"0:00:00\"){\n            this.props.toggleTimer();\n            {/******     interval set to 1 seconds on the onCountDown function    *******/}\n            this.timerObject = setInterval(this.props.onCountDown, 1000);\n        }\n        else this.pauseCountDown();\n\n    }\n    pauseCountDown(){\n        this.props.toggleTimer();\n        clearInterval(this.timerObject);\n        this.timerObject = 0;\n    }\n    render(){\n        const {\n            text, id, hours, minutes, seconds, totalTime, displayTime, showSetTimerModal, toggleSetTimerModal,\n            showEdit,  onClick, highlight, onDel, allowEdit,  timerOn, currentPosition, onCountDown,\n            onSelectTimerHours, onSelectTimerMinutes, onTimerSet, onStartTimer, onPauseCountDown,\n        } = this.props;\n\n        return(\n            /******     Draggable Task Card     *******/\n            <MDBCard\n                draggable\n                onDragStart={(ev) => {\n                    console.log('Dragging: ', text);\n                    clearInterval(this.timerObject)\n                    ev.dataTransfer.setData(\"DragTask\", currentPosition);\n                }}\n                md={\"4\"}\n                border={\"success\"}\n                style={{\n                    height: 'auto',\n                    textDecoration: highlight ? 'line-through' : 'none',\n                    textDecorationColor: 'red',\n                    margin: 5,\n                    backgroundColor: highlight ? 'rgba(0,0,0,.7)' : 'transparent',\n                    opacity: highlight ? '0.4' : null\n                }}\n            >\n                <MDBCardHeader>\n                    <div>\n                        <MDBCardTitle className={'text-center text-success'}>\n                            {/******     Timer Display     *******/}\n                            <strong>{displayTime}</strong>\n                        </MDBCardTitle>\n                        <div style={{display:'flex', flexDirection:'row', justifyContent:'space-evenly', marginTop: 5}}>\n                            {/******     Timer Inputs Modal     *******/}\n                            <MDBModal isOpen={showSetTimerModal} toggle={toggleSetTimerModal} size=\"sm\">\n                                <MDBModalHeader>Set Task Timer</MDBModalHeader>\n                                <MDBModalBody style={{display: 'flex', flexDirection: 'row'}}>\n                                    {/******     Select Timer Inputs Container    *******/}\n                                    <SelectTimerInputs id={id} hours={hours} minutes={minutes}/>\n                                    <MDBBtn color=\"light-green\" size=\"sm\" onClick={onTimerSet}>Set</MDBBtn>\n                                </MDBModalBody>\n                                    <MDBBtn outline color=\"info\" size=\"sm\" onClick={toggleSetTimerModal}>Exit</MDBBtn>\n                            </MDBModal>\n                            {/******     Timer Controls     *******/}\n                                <MDBTooltip style={{width:'40%'}} placement=\"top\" tag=\"a\" component=\"span\" tooltipContent=\"Set Timer\">\n                                    <MDBIcon\n                                        onClick={toggleSetTimerModal}\n                                        color=\"mdb-color\"\n                                        far icon=\"clock\"\n                                        size={'lg'}\n                                    />\n                                </MDBTooltip>\n                                <MDBTooltip style={{width:'40%'}} placement=\"top\" tag=\"a\" component=\"span\" tooltipContent=\"Start\">\n                                    <MDBIcon\n                                        far icon=\"play-circle\"\n                                        size={'lg'}\n                                        onClick={() => this.onStartTimer() }\n                                        color=\"mdb-color\"\n                                    />\n                                </MDBTooltip>\n                                <MDBTooltip style={{width:'40%'}} placement=\"top\" tag=\"a\" component=\"span\" tooltipContent=\"Pause\">\n                                    <MDBIcon\n                                        onClick={() => {\n                                            this.pauseCountDown();\n                                        }}\n                                        color=\"mdb-color\"\n                                        far icon=\"pause-circle\"\n                                        size={'lg'}\n                                    />\n                                </MDBTooltip>\n                        </div>\n                    </div>\n                </MDBCardHeader>\n                {/******     Task Title     *******/}\n                <MDBCardTitle className=\"text-center text-dark mt-2\" style={{backgroundColor: 'rgba(250,250,250,.3)', textAlign:'center'}}>\n                    {text}\n                </MDBCardTitle>\n                {/******     Task Controls   *******/}\n                <MDBCardFooter\n                    style={{textAlign:'center', alignSelf:'center', justifyContent: 'center', alignContent:'center'}}\n                >\n                    <MDBBtn\n                        onClick={() => {\n                            clearInterval(this.timerObject);\n                            onClick();\n                        }}\n                        color=\"deep-purple\"\n                        size={\"sm\"}\n                    >\n                        <MDBIcon far icon=\"check-circle\" size={'lg'} />\n                    </MDBBtn>\n                    <MDBBtn\n                        onClick={ () => {\n                            clearInterval(this.timerObject);\n                            onDel()\n                        }}\n                        color=\"unique\"\n                        size={\"sm\"}\n                    >\n                        <MDBIcon far icon=\"trash-alt\" size={'lg'}/>\n                    </MDBBtn>\n                    <MDBBtn\n                        onClick={() => {\n                            clearInterval(this.timerObject);\n                            allowEdit();\n                        }}\n                        color=\"light-green\"\n                        size={\"sm\"}\n                    >\n                        <MDBIcon\n                            className=\"mb-1\"\n                            icon=\"pencil-alt\"\n                            size={'lg'}\n                        />\n                    </MDBBtn>\n                </MDBCardFooter>\n                {/******     Edit Task Container    *******/}\n                {showEdit ? <EditTask id={id}/> : null}\n            </MDBCard>\n        )\n    }\n}\nTask.propTypes = {\n    id: PropTypes.number,\n    text: PropTypes.string,\n    hours: PropTypes.number,\n    minutes: PropTypes.number,\n    seconds: PropTypes.number,\n    totalTime: PropTypes.string,\n    displayTime: PropTypes.string,\n    highlight: PropTypes.bool,\n    showEdit: PropTypes.bool,\n    showSetTimerModal: PropTypes.bool,\n    toggleSetTimerModal: PropTypes.func,\n    onClick: PropTypes.func,\n    onDel: PropTypes.func,\n    allowEdit: PropTypes.func,\n    timerOn: PropTypes.bool,\n    currentPosition: PropTypes.number,\n    onTimerSet: PropTypes.func,\n    onStartTimer: PropTypes.func,\n    onPauseCountDown: PropTypes.func,\n    onCountDown: PropTypes.func,\n    toggleTimer: PropTypes.func,\n};\n\nexport default connect()(Task);","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Task from './Task'\nimport { MDBRow, MDBCol,} from \"mdbreact\";\n\n{/******     TaskList Component    *******/}\nconst TaskList = ({\n      tasks, onTaskComplete, onDeleteTask, onAllowEdit,\n      onDropTask, setTheTimer, countDown, onToggleSetTimerModal, onToggleTimerSwitch\n    }) => (\n\n    <MDBRow>\n        { tasks ?\n            tasks.map((task, index) => (\n\n                <MDBCol md={\"4\"} key={index}\n                        onDragOver={(e) => {\n                            e.preventDefault();\n                            console.log('dragging over')\n                        }}\n                        onDrop={(e) => onDropTask( e, index )}\n                >\n                    <Task\n                        id={task.id}\n                        key={index}\n                        currentPosition={index}\n                        text={task.text}\n                        hours={task.hours}\n                        minutes={task.minutes}\n                        seconds={task.seconds}\n                        totalTime={task.totalTime}\n                        displayTime={task.displayTime}\n                        highlight={task.highlight}\n                        showEdit={task.showEdit}\n                        showSetTimerModal={task.showSetTimerModal}\n                        timerOn={task.timerOn}\n                        onClick={() => {\n                            console.log('onTaskComplete: ' + task.id + '==' + task.highlight);\n                            onTaskComplete(task.id)\n                        }}\n                        onDel={() => {\n                            console.log('onDeleteTask: ' + task.id + '==' );\n                            onDeleteTask(task.id)\n                        }}\n                        allowEdit={() => {\n                            console.log('onEditQuote: ' + task.id + '==' );\n                            onAllowEdit(task.id)\n                        }}\n                        toggleSetTimerModal={() => onToggleSetTimerModal(task.id, task.showSetTimerModal)}\n\n                        onTimerSet={ () => {\n                            setTheTimer(task.id, task.hours, task.minutes);\n                            onToggleSetTimerModal(task.id, task.showSetTimerModal);\n                        } }\n                        onCountDown={() => countDown(task.id, task.timerOn, task.seconds)}\n                        onPauseCountDown={ () => console.log('onPause: ', task.timerObject)}\n                        toggleTimer={ () => {\n                            console.log('Switching the TimerOn state: ', task.timerOn);\n                            onToggleTimerSwitch(task.id, task.timerOn);\n                        }}\n                    />\n                </MDBCol>\n        ))\n        : 'No Tasks'\n        }\n    </MDBRow>\n\n);\nTaskList.propTypes = {\n    tasks: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number,\n            highlight: PropTypes.bool,\n            showEdit: PropTypes.bool,\n            text: PropTypes.string,\n            timerOn: PropTypes.bool,\n            minutes: PropTypes.number,\n            hours: PropTypes.number,\n            showSetTimerModal: PropTypes.bool,\n        })\n    ),\n    onTaskComplete: PropTypes.func,\n    onDeleteTask: PropTypes.func,\n    onAllowEdit: PropTypes.func,\n    onDropTask: PropTypes.func,\n    onShuffleTasks: PropTypes.func,\n    setTheTimer: PropTypes.func,\n    countDown: PropTypes.func,\n    onToggleSetTimerModal: PropTypes.func,\n    onToggleTimerSwitch: PropTypes.func,\n\n};\nexport default TaskList;","import { connect } from 'react-redux'\nimport {\n    highTask, removeTask, allowEdit, onDropTask, onToggleSetTimerModal,\n    setTimer, countDown,onToggleTimerSwitch,\n} from '../actions'\nimport TaskList from '../components/TaskList'\n\nconst mapStateToProps = (state) => ({\n        tasks: state.allTasks\n    });\n\nconst mapDispatchToProps = dispatch => ({\n    onTaskComplete: id => {\n            dispatch(highTask(id))\n    },\n    onDeleteTask: id => {\n        dispatch(removeTask(id))\n    },\n    onAllowEdit: id => {\n        dispatch(allowEdit(id))\n    },\n    onDropTask: (e, dropSpot) => {\n        dispatch(onDropTask(e, dropSpot))\n    },\n    setTheTimer: (id, hours, minutes) => {\n        dispatch(setTimer(id, hours, minutes))\n    },\n    countDown: (id, timerOn, seconds) => {\n        dispatch(countDown(id, timerOn ,seconds))\n    },\n    onToggleSetTimerModal: (id, showSetTimerModal) => {\n        dispatch(onToggleSetTimerModal(id, showSetTimerModal))\n    },\n    onToggleTimerSwitch: (id, timerOn) => {\n        dispatch(onToggleTimerSwitch(id, timerOn))\n    },\n});\n{/******     state and props mapped to TaskList Component    *******/}\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TaskList);","import React, { Component } from 'react';\nimport {  MDBContainer,} from \"mdbreact\"\nimport './App.css';\nimport AddTask from './containers/AddTask';\nimport MappedTaskList from './containers/MappedTaskList';\n\nclass App extends Component {\n    render() {\n        return (\n            <MDBContainer  md={\"12\"} style={{flex:1, texAlign:'center', justifyContent:'center',}} >\n                <h1 className=\"display-3 text-center\">Tasked:</h1>\n                <AddTask/>\n                <MappedTaskList />\n            </MDBContainer>\n        );\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {combineReducers} from 'redux';\nimport {\n    ADD_TASK, REMOVE_TASK, EDIT_TASK,\n    HIGH_TASK, ALLOW_EDIT, DRAG_TASK,\n    SET_TIMER, TOGGLE_SET_TIMER_MODAL,\n    COUNT_DOWN, SELECT_MINUTES, SELECT_HOURS, TOGGLE_TIMER_SWITCH,\n} from '../actions';\n\n\nexport const allTasks = (state=[], action) => {\n    switch(action.type){\n        case ADD_TASK:\n            return [\n                ...state,\n                {\n                    id: action.id,\n                    text: action.text,\n                    hours: action.hours,\n                    minutes: action.minutes,\n                    seconds: action.seconds,\n                    totalTime: action.totalTime,\n                    displayTime: action.displayTime,\n                    timerOn: action.timerOn,\n                    highlight: false,\n                    showEdit: false,\n                    showSetTimerModal: false\n                }\n            ];\n        case REMOVE_TASK:\n            return state.filter(task => task.id !== action.id);\n        case EDIT_TASK:\n            return state.map(task =>\n                task.id === action.id\n                    ? Object.assign({}, task, {text:action.text, highlight: false, showEdit: false })\n                    : task\n            );\n        case HIGH_TASK:\n            return state.map(task =>\n                task.id === action.id\n                    ? Object.assign({}, task, { highlight: !task.highlight })\n                    : task\n            );\n        case TOGGLE_SET_TIMER_MODAL:\n            return state.map(task =>\n                task.id === action.id\n                    ? Object.assign({}, task, { showSetTimerModal: !task.showSetTimerModal })\n                    : task\n            );\n\n        case ALLOW_EDIT:\n            return state.map(task =>\n                task.id === action.id\n                    ? Object.assign({}, task, { showEdit: !task.showEdit })\n                    : task\n            );\n        case DRAG_TASK:\n\n            let item = action.ev.dataTransfer.getData(\"DragTask\");\n            return buildNewTaskList(state, item, action.dropSpot);\n\n\n        case SELECT_MINUTES:\n            return state.map(task =>\n                task.id === action.id\n                ? Object.assign( {}, task, {minutes: action.minutes})\n                : task\n            );\n\n        case SELECT_HOURS:\n            return state.map(task =>\n                task.id === action.id\n                ? Object.assign({}, task, {hours: action.hours})\n                : task\n            );\n\n        case SET_TIMER:\n            return state.map(task =>\n                task.id === action.id\n                ? Object.assign(\n                    {},\n                    task,\n                    {\n                        displayTime: onTimerSet(action.hours, action.minutes),\n                        seconds: calculateSeconds(action.hours, action.minutes),\n                        hours: 0,\n                        minutes: 0,\n                    }\n                )\n                : task\n            );\n        case TOGGLE_TIMER_SWITCH:\n            return state.map(task =>\n                task.id === action.id\n                ? Object.assign(\n                    {},\n                    task,\n                    {\n                        timerOn: !task.timerOn,\n                    }\n                )\n                : task\n            );\n        case COUNT_DOWN:\n            return state.map(task =>\n                (task.id === action.id && task.seconds >= 0)\n                ? Object.assign(\n                    {},\n                    task,\n                    {\n                        timerOn: stopTimer(task.seconds),\n                        seconds: countDownSeconds(task.seconds),\n                        displayTime: prepareDisplayTime(task.seconds),\n\n                    }\n                    )\n                : task\n            );\n        default:\n            return state;\n    }\n}\n\n\nfunction countDownSeconds(taskSeconds){\n    if(taskSeconds > 0){\n        let timeLeft = taskSeconds - 1;\n        return timeLeft;\n    }\n}\n\nfunction timerBlackout(taskSeconds, taskHighlight){\n    if(taskSeconds === 0){\n        return !taskHighlight\n    }\n}\n\nfunction stopTimer(taskSeconds){\n    if(taskSeconds === 0){\n        return false;\n    }\n    return true;\n}\n\nfunction prepareDisplayTime(sec){\n    const hours = Math.floor( parseInt(sec) / 3600);\n    console.log('hours', hours);\n    let remainderMins = sec%3600;\n    let mins = Math.floor(remainderMins/60);\n    let remainderSecs = remainderMins%60;\n    let secs = Math.ceil(remainderSecs);\n    if(mins < 10){\n        mins = \"0\"+mins;\n    }\n    if(secs < 10 && secs > 0){\n        secs = \"0\"+secs;\n    }\n    if(secs === 0){\n        return \"0:00:00\";\n    }\n    return `${hours}:${mins}:${secs}`\n}\n\nfunction onTimerSet(hrs, mins){\n    let displayMins = mins;\n    if(mins < 10){\n        displayMins = \"0\"+mins;\n    }\n    return `${hrs}:${displayMins}:00`\n}\n\nfunction calculateSeconds(hrs, mins){\n    let hoursToMin=0;\n    if(hrs > 0){\n        hoursToMin = hrs * 60;\n    }\n    let allMins = parseInt(hoursToMin) + parseInt(mins);\n    return (allMins * 60);\n\n}\n\nfunction buildNewTaskList (array, currentPosition, dropSpot){\n    let currentTasks = array.slice();\n    let task = array[currentPosition];\n    currentTasks.splice(currentPosition, 1);\n    return [\n        ...currentTasks.slice(0, dropSpot),\n        task,\n        ...currentTasks.slice(dropSpot)\n     ];\n}\n\n{/******     Root Reducer supplied to Redux Store    *******/}\nexport default combineReducers({\n    allTasks,\n});\n\n    \n   \n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport {createLogger} from 'redux-logger';\nimport rootReducer from './reducers';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\n\nconst logger = createLogger();\nconst store = createStore(\n    rootReducer,applyMiddleware(logger)\n);\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}